---
import { getCollection } from "astro:content";
import Pagination from "@components/blog/pagination.astro";
import Posts from "@components/blog/posts.astro";
import Container from "@components/container.astro";
import Sectionhead from "@components/sectionhead.astro";
import Layout from "@layouts/Layout.astro";

import { getLangFromUrl, useTranslations } from "../../i18n/utils";

export async function getStaticPaths({ paginate }) {
  try {
    // Get all blog posts
    const posts = await getCollection("blog", ({ data }) => {
      return !data.draft && data.publishDate instanceof Date;
    });

    // Preprocess the posts to split the slugs and get the languages
    const processedPosts = posts.map((post) => {
      const slugParts = post.slug.split("/");
      let lang = "en"; // Default to English

      // If the slug starts with a language code, extract it
      if (slugParts.length > 1) {
        lang = slugParts[0];
      }

      // Remove language prefix from slug for the final slug
      const finalSlug = slugParts.length > 1 ? slugParts.slice(1).join("/") : post.slug;

      return {
        ...post,
        slug: finalSlug,
        lang: lang,
      };
    });

    // Filter posts for English language ("en")
    const localizedPosts = processedPosts.filter(
      (post) => post.lang === "en",
    );

    // Sort by publish date (newest first)
    localizedPosts.sort(
      (a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf(),
    );

    // Ensure at least one page is generated, even if no posts
    if (localizedPosts.length === 0) {
      return [
        {
          params: { page: undefined }, // For /blog
          props: {
            page: {
              data: [],
              start: 0,
              end: -1,
              total: 0,
              currentPage: 1,
              size: 4,
              lastPage: 1,
              url: {
                current: '/blog',
                prev: undefined,
                next: undefined,
              },
            },
          },
        },
      ];
    }

    // Generate paginated routes
    return paginate(localizedPosts, {
      pageSize: 4,
      params: { page: undefined }, // Ensure /blog is generated for page 1
    });
  } catch (error) {
    console.error("Error in getStaticPaths:", error);
    // Return single page with empty data on error
    return [
      {
        params: { page: undefined }, // For /blog
        props: {
          page: {
            data: [],
            start: 0,
            end: -1,
            total: 0,
            currentPage: 1,
            size: 4,
            lastPage: 1,
            url: {
              current: '/blog',
              prev: undefined,
              next: undefined,
            },
          },
        },
      },
    ];
  }
}

const { page = { data: [], url: { prev: undefined, next: undefined } } } = Astro.props;

// Get current language and create translation function - with safe URL handling
const safeUrl = Astro.url || new URL('/', Astro.site || 'http://localhost:4321');
const lang = getLangFromUrl(safeUrl);
const t = useTranslations(lang);
---

<Layout title="Blog">
  <Container>
    <Sectionhead>
      <Fragment slot="title">Our Blog</Fragment>
      <Fragment slot="desc">Discover Industry Insights, Company News, and Expert Opinions.</Fragment>
    </Sectionhead>
    <Posts posts={page.data || []} />
    <Pagination class="mt-20" prevUrl={page.url?.prev} nextUrl={page.url?.next} />
  </Container>
</Layout>
